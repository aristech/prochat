name: Deploy to Staging

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build webapp
        run: |
          cd webapp
          npm ci
          make dist

      - name: Build server for ARM64
        run: |
          cd server
          make setup-go-work
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o mattermost ./cmd/mattermost
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o mmctl ./cmd/mmctl

      - name: Prepare deployment package
        run: |
          mkdir -p deploy/mattermost/bin
          mkdir -p deploy/mattermost/client
          mkdir -p deploy/mattermost/config
          mkdir -p deploy/mattermost/logs
          mkdir -p deploy/mattermost/data
          mkdir -p deploy/mattermost/plugins

          # Copy server binaries
          cp server/mattermost deploy/mattermost/bin/
          cp server/mmctl deploy/mattermost/bin/

          # Copy webapp
          cp -r webapp/channels/dist/* deploy/mattermost/client/

          # Copy i18n and templates if they exist
          [ -d server/i18n ] && cp -r server/i18n deploy/mattermost/ || true
          [ -d server/templates ] && cp -r server/templates deploy/mattermost/ || true

      - name: Create tarball
        run: |
          cd deploy
          tar -czf mattermost-staging.tar.gz mattermost

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: staging-${{ github.run_number }}
          release_name: Staging Build ${{ github.run_number }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deploy/mattermost-staging.tar.gz
          asset_name: mattermost-staging.tar.gz
          asset_content_type: application/gzip
